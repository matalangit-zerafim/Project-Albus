/*
Referrence:
jabatan (kode_jabatan,nama_jabatan)
pegawai (username_pegawai,nama_pegawai,password_pegawai)
customer(kode_customer,nama_customer,alamat_customer,telepon_customer)
menulaundry(kode_laundry,jenis_laundry[kiloan/satuan],hargapersatuan)
transaksi(nonotatr,tglterima,tglselesai,kode_customer,username_penerima,status[minta dikirim atau diambil],totalnota,downpayment,statuspekerjaan[terima,cuci,selesai,kirim])
detail_transaksi(nonota,kode_laundry,jumlah,hargasatuan)
barang(kode_barang,nama_Barang,stok,hargabeli)
pembelian(nonota,tgltransaksi,username_pegawai_penerima)
detail_pembelian(nonota,kode_barang,jumlah,hargabeli)
penggunaan_bahan(nopermintaan,tglpermintaan,kode_barang,jumlah_minta)
pengiriman(nokirim, nonotatr,username_pegawai_pengirim,tgl_kirim)

Design:
COMMODITY(ID, NAME, PRICE)
--COMMODITY ADALAH JASA ATAU BARANG YANG PERLU DIBELI DALAM PENGOPERASIAN LAUNDRY (AIR, LISTRIK, GAJI, SABUN, DLL) SAYA RASA MENGABSTRAKAN PENGELUARAN LEBIH BAIK DARIPADA GAJI DAN BARANG SEHARI-HARI HINGGA AIR DAN LISTRIK TERPISAH
DEPARTMENT(ID, ID_COMMODITY "SALARY", NAME)
-- DEPARTMENT ADALAH JABATAN DARI PEGAWAI DISINI SALARY(GAJI) MERUPAKAN SUATU COMMODITY
EMPLOYEE(ID, DEPARTMENT_ID, NAME, USERNAME, PASSWORD)
--EMPLOYEE ADALAH PEGAWAI
CUSTOMER(ID, NAME, ADDRESS, TELEPHONE)
--CUSTOMER ADALAH PELANGGAN
TRANSACTION_MASTER(ID, CUSTOMER_ID, START_DATE, END_DATE, TOTAL)
--TRANSACTION MASTER ADALAH MASTER DARI TRANSAKSI DISINI DIPISAH TRANSACTION MASTER DENGAN TRANSACTION DETAIL KARENA DALAM SUATU TRANSAKSI BISA TERDAPAT BANYAK SERVICE YANG DILAKUKAN
TRANSACTION_DETAIL(ID, TRANSACTION_MASTER_ID, SERVICE_ID, AMOUNT, SUB_TOTAL)
--TRANSACTION DETAIL ADALAH DETAIL DARI TRANSAKSI YANG FUNGSI UTAMANYA SEBAGAI PENGHUBUNG ANTARA TRANSACTION DENGAN SERVICE YANG DISEDIAKAN 
STATUS(ID, NAME)
--STATUS DARI TRANSAKSI(ON PROGRESS, ON DELIVERY, DONE, PENDING(BISA SAJA ALAMAT YANG DIMASUKKAN TERNYATA SALAH ATAU ORANGNYA MENGHILANG))
TRANSACTION_STATUS(ID, STATUS_ID, TRANSACTION_MASTER_ID, LOG_DATE)
--TRANSACTION_STATUS ADALAH LOG STATUS DARI SAUTU TRANSAKSI
SERVICE(ID, STOCK_ID, NAME, PRICE)
--SERVICE ADALAH JASA YANG DISEDIAKAN OLEH LAUNDRY (PENCUCIAN, PENGERINGAN, DELIVERY,DLL) SAYA RASA DELIVERY/PENGIRIMAN DAPAT DIMASUKKAN DISINI DARIPADA DI TABLE TERPISAH LAGI PULA STATUSNYA MEMILIKI LOG
PURCHASE(ID, COMMODITY_ID, LOG_DATE, AMOUNT)
--PURCHASE ADALAH LOG PEMBELIAN COMMODITY DAN SAYA MERASA HUBUNGAN PEMBELIAN BARANG(COMMODITY) TIDAK PERLU MANY TO MANY SEDANGKAN ONE TO MANY SAJA CUKUP DAN LEBIH SIMPLE
STOCK(ID, COMMODITY_ID, AMOUNT)
--MESKIPUN SEDIKIT REDUNDANT JUMLAH STOK DAPAT DIDAPAT DARI MENJUMLAHKAN PURCHASE.AMOUNT DENGAN TRANSACTION_DETAIL.AMOUNT DENGAN MENCOCOKKAN COMMODITY.ID NYA SAYA RASA JAUH LEBIH CEPAT APABILA MEMILIKI TABLE STOCK INI
*/


DROP TABLE COMMODITY CASCADE CONSTRAINTS;
DROP TABLE SALARY CASCADE CONSTRAINTS;
DROP TABLE STOCK CASCADE CONSTRAINTS;
DROP TABLE DEPARTMENT CASCADE CONSTRAINTS;
DROP TABLE EMPLOYEE CASCADE CONSTRAINTS;
DROP TABLE CUSTOMER CASCADE CONSTRAINTS;
DROP TABLE TRANSACTION_MASTER CASCADE CONSTRAINTS;
DROP TABLE TRANSACTION_DETAIL CASCADE CONSTRAINTS;
DROP TABLE STATUS CASCADE CONSTRAINTS;
DROP TABLE TRANSACTION_STATUS CASCADE CONSTRAINTS;
DROP TABLE SERVICE CASCADE CONSTRAINTS;
DROP TABLE PURCHASE CASCADE CONSTRAINTS;

CREATE TABLE COMMODITY (
	ID NUMBER GENERATED ALWAYS as IDENTITY(START with 1 INCREMENT by 1) CONSTRAINTS PK_COMMODITY PRIMARY KEY,
	NAME VARCHAR2(127),
	PRICE NUMBER
);


CREATE TABLE SERVICE (
	ID NUMBER GENERATED ALWAYS as IDENTITY(START with 1 INCREMENT by 1) CONSTRAINTS PK_SERVICE PRIMARY KEY,
	NAME VARCHAR2(127),
	PRICE NUMBER
);

CREATE TABLE PURCHASE (
	ID NUMBER GENERATED ALWAYS as IDENTITY(START with 1 INCREMENT by 1) CONSTRAINTS PK_PURCHASE PRIMARY KEY,
	FK_COMMODITY_ID NUMBER CONSTRAINTS FK_COMMODITY_ID_1 REFERENCES COMMODITY(ID),
	LOG_DATE TIMESTAMP,
	AMOUNT NUMBER
);

CREATE TABLE STOCK (
	ID NUMBER GENERATED ALWAYS as IDENTITY(START with 1 INCREMENT by 1) CONSTRAINTS PK_STOCK PRIMARY KEY,
	FK_COMMODITY_ID NUMBER CONSTRAINTS FK_COMMODITY_ID_2 REFERENCES COMMODITY(ID),
	FK_SERVICE_ID NUMBER CONSTRAINTS FK_SERVICE_ID_1 REFERENCES SERVICE(ID),
	AMOUNT NUMBER
);

CREATE TABLE DEPARTMENT (
	ID NUMBER GENERATED ALWAYS as IDENTITY(START with 1 INCREMENT by 1) CONSTRAINTS PK_DEPARTMENT PRIMARY KEY,
	NAME VARCHAR2(127),
	RANK NUMBER,
	SALARY NUMBER
);

CREATE TABLE EMPLOYEE (
	ID NUMBER GENERATED ALWAYS as IDENTITY(START with 1 INCREMENT by 1) CONSTRAINTS PK_EMPLOYEE PRIMARY KEY,
	FK_DEPARTMENT_ID NUMBER CONSTRAINTS FK_DEPARTMENT_ID_1 REFERENCES DEPARTMENT(ID),
	NAME VARCHAR2(127),
	USERNAME VARCHAR2(255),
	PASSWORD VARCHAR2(255),
	ADDRESS VARCHAR2(255),
	STATUS NUMBER
);

CREATE TABLE CUSTOMER (
	ID NUMBER GENERATED ALWAYS as IDENTITY(START with 1 INCREMENT by 1) CONSTRAINTS PK_CUSTOMER PRIMARY KEY,
	NAME VARCHAR2(127),
	ADDRESS VARCHAR2(255),
	TELEPHONE VARCHAR2(30)
);


CREATE TABLE TRANSACTION_MASTER (
	ID NUMBER GENERATED ALWAYS as IDENTITY(START with 1 INCREMENT by 1) CONSTRAINTS PK_TRANSACTION_MASTER PRIMARY KEY,
	FK_CUSTOMER_ID NUMBER CONSTRAINTS FK_CUSTOMER_ID_1 REFERENCES CUSTOMER(ID),
	TOTAL NUMBER
);

CREATE TABLE TRANSACTION_DETAIL (
	ID NUMBER GENERATED ALWAYS as IDENTITY(START with 1 INCREMENT by 1) CONSTRAINTS PK_TRANSACTION_DETAIL PRIMARY KEY,
	FK_TRANSACTION_MASTER_ID NUMBER CONSTRAINTS FK_TRANSACTION_MASTER_ID_1 REFERENCES TRANSACTION_MASTER(ID),
	FK_SERVICE_ID NUMBER CONSTRAINTS FK_SERVICE_ID_2 REFERENCES SERVICE(ID),
	AMOUNT NUMBER
);

CREATE TABLE STATUS (
	ID NUMBER GENERATED ALWAYS as IDENTITY(START with 1 INCREMENT by 1) CONSTRAINTS PK_STATUS PRIMARY KEY,
	NAME VARCHAR2(127)
);

CREATE TABLE TRANSACTION_STATUS (
	ID NUMBER GENERATED ALWAYS as IDENTITY(START with 1 INCREMENT by 1) CONSTRAINTS PK_TRANSACTION_STATUS PRIMARY KEY,
	FK_TRANSACTION_MASTER_ID NUMBER CONSTRAINTS FK_TRANSACTION_MASTER_ID_2 REFERENCES TRANSACTION_MASTER(ID),
	FK_STATUS_ID NUMBER CONSTRAINTS FK_STATUS_ID_1 REFERENCES STATUS(ID),
	LOG_DATE DATE
);

COMMIT;

-- QUERY YANG TAK PAKE UNTUK BIKIN MASTER SAMA TRANSACTION MUNGKIN BERGUNA (KEMUNGKINAN BESAR GAK)
SELECT P.ID "ID", C.NAME "COMMODITY", P.LOG_DATE "LOG DATE", P.AMOUNT "AMOUNT"  FROM PURCHASE P JOIN COMMODITY C ON P.FK_COMMODITY_ID = C.ID;
SELECT D.ID "ID", S.NAME "SALARY"  FROM DEPARTMENT D JOIN SALARY S ON D.FK_SALARY_ID = S.ID;
SELECT E.ID "ID", E.NAME "NAME", D.NAME "DEPARTMENT" FROM EMPLOYEE E JOIN DEPARTMENT D ON E.FK_DEPARTMENT_ID = D.ID;

SELECT 


insert into service(FK_COMMODITY_ID,FK_SERVICE_ID,amount) values(1,:1,2);


SELECT SUM(C.PRICE * S.AMOUNT)
FROM STOCK S
JOIN COMMODITY C
ON S.FK_COMMODITY_ID = C.ID
WHERE S.FK_SERVICE_ID = '4';
GROUP BY S.FK_SERVICE_ID;
;
SELECT * FROM STOCK;

SELECT PRICE
FROM SERVICE
WHERE ID = :id;
SELECT * FROM TRANSACTION_DETAIL;


SELECT S.NAME,T.AMOUNT FROM TRANSACTION_DETAIL T JOIN SERVICE S ON T.FK_SERVICE_ID = S.ID WHERE FK_TRANSACTION_MASTER_ID = '4';
